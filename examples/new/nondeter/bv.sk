
struct Op{
    int op;
}

struct BV{
    bit[4] bv;
}


generator void genOp(ref Op op)
{
    op = new Op(op = ??(1) + ??(1));
}

generator void genBV(ref BV bv) {
    bv = new BV(bv = {??(1),??(1),??(1),??(1)});
}

void BV_equal(BV a, BV b, ref boolean ret) {
    ret = a.bv == b.bv;
}

void isAnd(Op op, ref boolean ret)
{
    ret = op.op == 1;
}
void isOr(Op op, ref boolean ret)
{
    ret = op.op == 0;
}
void isXor(Op op, ref boolean ret)
{
    ret = op.op == 2;
}

void zero(ref BV o) {
    o = new BV(bv = {0, 0, 0, 0});
}

void and(BV a, BV b, ref BV o) {
    o = new BV();
    o.bv = a.bv & b.bv;
}

void or(BV a, BV b, ref BV o) {
    o = new BV();
    o.bv = a.bv | b.bv;
}

void xor(BV a, BV b, ref BV o) {
    o = new BV();
    o.bv = a.bv ^ b.bv;
}

void neg(BV a, ref BV o) {
    o = new BV();
    o.bv = !a.bv;
}

void subset(BV a, BV b, ref boolean ret) {
    ret = (a.bv & b.bv) == a.bv;
}

void eval(Op op, BV a, BV b, ref BV o) {
    o = new BV();
    if(op.op == 0)
        o.bv = a.bv | b.bv;
    else if(op.op == 1)
        o.bv = a.bv & b.bv;
    else
        o.bv = a.bv ^ b.bv;
}

void fun2(BV a, BV b, BV h, ref BV o) {
    o = new BV();
    o.bv = a.bv ^ (b.bv & h.bv);
}

void fun3(BV a, BV b, BV h, ref BV o) {
    o = new BV();
    o.bv = a.bv ^ (b.bv | h.bv);
}

void fun4(BV a, BV b1, BV b2, BV h, ref BV o) {
    o = new BV();
    o.bv = a.bv ^ (((b1.bv & b2.bv) | h.bv) & (b1.bv | b2.bv));
}

